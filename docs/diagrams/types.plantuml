@startuml Types
skinparam style strictuml
skinparam monochrome true

interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Type  {
    indexing(Type type): Type
    cast(Type type):Type
    dot(String type): Type
    arithmetic(Type type): Type
    logical(Type type): Type
    call(List<Expression> args): Type
    comparison(Type type): Type
    assignment(Type type): Type
    isIndexable(): boolean
    allowDot(String field): boolean
    isArithmetic(): boolean
    isLogical(): boolean
    hasOtherArgs(List<Expression> args): boolean
    promotableTo(Type to): boolean
    getNumberOfBytes(): int
    getFieldOffset(String field): int
}

ASTNode <|-- Type

abstract AbstractType

Type <|.. AbstractType

class IntType

AbstractType <|.. IntType

class DoubleType

AbstractType <|.. DoubleType

class CharType

AbstractType <|.. CharType

class Array {
    size: int
    type: Type
}

AbstractType <|.. Array

class Struct {
    fields: List<StructFields>
}

Struct  o-- "0.*" StructFields

class StructFields implements AbstractASTNode {
    name: String
    type: Type
    offset: int
}

AbstractType <|.. Struct

class FuncType {
    params: List<VarDefinition>
    returnType: Type
}

AbstractType <|.. FuncType

class VoidType {

}

AbstractType <|.. VoidType

@enduml
